diff --git a/Makefile b/Makefile
index 39a99d7..f5c6846 100644
--- a/Makefile
+++ b/Makefile
@@ -118,8 +118,10 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 UPROGS=\
 	$U/_cat\
 	$U/_echo\
+	$U/_exit\
 	$U/_forktest\
 	$U/_grep\
+	$U/_history\
 	$U/_init\
 	$U/_kill\
 	$U/_ln\
@@ -128,6 +130,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_trace\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..37e1c8d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -185,5 +186,10 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+
+int             trace(int);
+int             history(struct syscall_stat*, uint64 addr);
+int             xv6Exit(void);
+void            timerhalt(void);
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..9a2e1bb 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,15 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +125,9 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+        
+halt:
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..7246eea 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,7 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+  timerhalt();
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..f101779 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->t_id=-1; // which system call is passed with trace
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -681,3 +682,11 @@ procdump(void)
     printf("\n");
   }
 }
+int trace(int system_call_num)
+{
+  struct proc *pr=myproc();
+  acquire(&pr->lock);
+  pr->t_id=system_call_num;
+  release(&pr->lock);
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8a2d87d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,14 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int t_id;
 };
+
+
+
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
+extern struct syscall_stat arr[25];
\ No newline at end of file
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..4e4163c 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +76,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +88,8 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+void
+timerhalt()
+{
+  timer_scratch[0][5] = 1;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1fd1302 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,10 @@
 #include "syscall.h"
 #include "defs.h"
 
+
+int glob=0;
+struct syscall_stat arr[25];
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,6 +105,36 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_xv6Exit(void);
+char * syscall_names[]={
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history]   "history",
+};
+
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +160,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history]   sys_history,
+[SYS_xv6Exit]   sys_xv6Exit,
 };
 
 void
@@ -135,11 +172,139 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+
+  char open_arg1[MAXPATH];
+  int open_arg2;
+  int read_arg1;
+  int read_arg3;
+  int *pipe_arg1=(int *)p->trapframe->a0;
+  int close_arg1;
+  char exec_arg1[MAXPATH];
+  char link_arg1[MAXPATH];
+  char link_arg2[MAXPATH];
+  if(p->t_id==num&&(num==SYS_write||num==SYS_read))
+  {
+    argint(0, &read_arg1);
+    argint(2, &read_arg3);
+  }
+  else if(p->t_id==num&&(num==SYS_close||num==SYS_kill||num==SYS_dup||num==SYS_sbrk||num==SYS_sleep||num==SYS_trace||num==SYS_exit||num==SYS_fstat||num==SYS_history))
+  {
+    argint(0, &close_arg1);
+  }
+  else if(p->t_id==num&&(num==SYS_exec||num==SYS_mknod||num==SYS_unlink||num==SYS_mkdir||num==SYS_chdir))
+  {
+    argstr(0,exec_arg1,sizeof(exec_arg1));
+  }
+  else if(p->t_id==num&&num==SYS_open)
+  {
+    argstr(0,open_arg1,sizeof(open_arg1));
+    argint(1,&open_arg2);
+  }
+  else if(p->t_id==num&&num==SYS_link)
+  {
+    argstr(0,link_arg1,sizeof(link_arg1));
+    argstr(1,link_arg2,sizeof(link_arg2));
+  }
+
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num])
+  {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+
+    int st;
+    int end;
+    acquire(&tickslock);
+    st=ticks;
+    release(&tickslock);
     p->trapframe->a0 = syscalls[num]();
-  } else {
+    acquire(&tickslock);
+    end=ticks;
+    release(&tickslock);
+    int tim=(end-st)*0.1;
+    acquire(&p->lock);
+    if(glob==0)
+    {
+      for(int i=1;i<=23;i++)
+      {
+        strncpy(arr[i].syscall_name, syscall_names[i], sizeof(arr[i].syscall_name) - 1);
+        arr[i].syscall_name[sizeof(arr[i].syscall_name) - 1] = '\0'; // Ensure null-termination
+        arr[i].count=0;
+        arr[i].accum_time=0;
+      }
+      glob=1;
+    }
+    arr[num].count++;
+    arr[num].accum_time+=tim;
+    release(&p->lock);
+
+
+    int history_arg1;
+    if(num==SYS_history)
+    {
+      argint(0,&history_arg1);
+      uint64 st; // user pointer to struct stat
+      argaddr(1, &st);
+      copyout(p->pagetable, st, (char *)arr, sizeof(arr));
+    }
+
+
+
+    if(p->t_id==num)
+    {
+      if(num==SYS_fork||num==SYS_uptime||num==SYS_getpid)
+      {
+        printf("pid: %d, syscall: %s, args: (void), return: %d\n",p->pid,syscall_names[num],p->trapframe->a0);
+      }
+      else if(num==SYS_wait||num==SYS_pipe)
+      {
+        printf("pid: %d, syscall: %s, args: (%p), return: %d\n",p->pid,syscall_names[num],pipe_arg1,p->trapframe->a0);
+      }
+      else if(num==SYS_write||num==SYS_read)
+      {
+        uint64 buf_addr;
+        char *buf;
+        argaddr(1, &buf_addr);
+        buf = (char *)buf_addr;
+
+        printf("pid: %d, syscall: %s, args: (%d, %p, %d), return: %d\n",p->pid,syscall_names[num],read_arg1, (uint64)buf,read_arg3,p->trapframe->a0);
+      }
+      else if(num==SYS_close||num==SYS_kill||num==SYS_dup||num==SYS_sbrk||num==SYS_sleep||num==SYS_trace||num==SYS_exit)
+      {
+        printf("pid: %d, syscall: %s, args: (%d), return: %d\n",p->pid,syscall_names[num],close_arg1,p->trapframe->a0);
+      }
+      else if(num==SYS_exec)
+      {
+        printf("pid: %d, syscall: %s, args: (%s, %p), return: %d\n",p->pid,syscall_names[num],exec_arg1,p->trapframe->a1,p->trapframe->a0);
+      }
+      else if(num==SYS_open)
+      {
+        printf("pid: %d, syscall: %s, args: (%s, %d), return: %d\n",p->pid,syscall_names[num],open_arg1,open_arg2,p->trapframe->a0);
+      }
+      else if(num==SYS_mknod)
+      {
+        printf("pid: %d, syscall: %s, args: (%s, %d, %d), return: %d\n",p->pid,syscall_names[num],exec_arg1,p->trapframe->a1,p->trapframe->a2,p->trapframe->a0);
+      }
+      else if(num==SYS_unlink||num==SYS_mkdir||num==SYS_chdir)
+      {
+        printf("pid: %d, syscall: %s, args: (%s), return: %d\n",p->pid,syscall_names[num],exec_arg1,p->trapframe->a0);
+      }
+      else if(num==SYS_link)
+      {
+        printf("pid: %d, syscall: %s, args: (%s, %s), return: %d\n",p->pid,syscall_names[num],link_arg1,link_arg2,p->trapframe->a0);
+      }
+      else if(num==SYS_fstat||num==SYS_history)
+      {
+        printf("pid: %d, syscall: %s, args: (%d, %p), return: %d\n",p->pid,syscall_names[num],close_arg1,p->trapframe->a1,p->trapframe->a0);
+      }
+      else
+      {
+         printf("pid: %d, syscall: %s, args: (), return: %d\n",p->pid,syscall_names[num],p->trapframe->a0);
+      }
+
+    }
+  }
+  else
+  {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e4be321 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history  23
+#define SYS_xv6Exit  24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..7088d2f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,9 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
+
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +92,25 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_trace(void)
+{
+  int system_call_num;
+  argint(0,&system_call_num);
+  return trace(system_call_num);
+}
+
+uint64
+sys_history(void)
+{
+  return 0;
+}
+uint64
+sys_xv6Exit(void)
+{
+  asm volatile("lui a1,0x100");
+  asm volatile("lui a2,0x5");
+  asm volatile("addi a2,a2,0x555");
+  asm volatile("sw a2,0(a1)");
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..8a2cc77 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -137,7 +137,7 @@ kerneltrap()
   int which_dev = 0;
   uint64 sepc = r_sepc();
   uint64 sstatus = r_sstatus();
-  uint64 scause = r_scause();
+  //uint64 scause = r_scause();
   
   if((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
@@ -145,8 +145,8 @@ kerneltrap()
     panic("kerneltrap: interrupts enabled");
 
   if((which_dev = devintr()) == 0){
-    printf("scause %p\n", scause);
-    printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
+    //printf("scause %p\n", scause);
+    //printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
     panic("kerneltrap");
   }
 
diff --git a/user/exit.c b/user/exit.c
new file mode 100644
index 0000000..c1f9fc1
--- /dev/null
+++ b/user/exit.c
@@ -0,0 +1,12 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+
+int main(int argc,char *argv[])
+{
+    xv6Exit();
+    return 0;
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..d70c5f3
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,33 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct syscall_stat
+{
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
+
+int main(int argc,char *argv[])
+{
+    struct syscall_stat arr[25];
+    if(argc==2)
+    {
+        history(atoi(argv[1]),arr);
+
+        int arg1=atoi(argv[1]);
+        printf("%d:     syscall: %s, #: %d, time: %d\n",arg1,arr[arg1].syscall_name,arr[arg1].count,arr[arg1].accum_time);
+    }
+    else
+    {
+        history(23,arr);
+        for(int i=1;i<=23;i++)
+        {
+            printf("%d:     syscall: %s, #: %d, time: %d\n",i,arr[i].syscall_name,arr[i].count,arr[i].accum_time);
+        }
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..aaedcd5 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -142,6 +142,7 @@ getcmd(char *buf, int nbuf)
   return 0;
 }
 
+
 int
 main(void)
 {
@@ -166,7 +167,9 @@ main(void)
       continue;
     }
     if(fork1() == 0)
+    {
       runcmd(parsecmd(buf));
+    }
     wait(0);
   }
   exit(0);
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..e38c06e
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..332dc19 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct syscall_stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -14,6 +14,7 @@ int open(const char*, int);
 int mknod(const char*, short, short);
 int unlink(const char*);
 int fstat(int fd, struct stat*);
+int history(int,struct syscall_stat*);
 int link(const char*, const char*);
 int mkdir(const char*);
 int chdir(const char*);
@@ -21,8 +22,9 @@ int dup(int);
 int getpid(void);
 char* sbrk(int);
 int sleep(int);
+int trace(int);
 int uptime(void);
-
+int xv6Exit(void);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8a632ef 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("xv6Exit");
\ No newline at end of file
